"""
Runner for extracting p-code from list of MS Office & Excel files

Input (src dir) is a directory containing MS Office Word & Excel files with macros
Output (dest dir, metadir)
    - extracted Pcode is stored in text files in [dest dir] named [fid].txt (where fid starts at [min fileID])
    - file metadata including the fid, file type, file name, and macro classification of malicious (M) or benign (B)

"""

import sys, os, json, codecs
from pcodedmp import pcodedump
import config

""" wrapper routine for extracting code from file """
def xtract(fpath, out_file_path, fid):
    xtractor = pcodedump(fpath, out_file_path, fid)
    xtractor.dump()

""" command line args:
        src dir        - directory with MS Office and Excel Documents containing macros
        dest dir       - directory to store extracted code
        metadir        - directory to store file metadata
        min fileID     - minimum starting file ID (ID increments after each file)
        file type      - "DOC" or "XLS"
        classification - M or B
"""
if __name__ == '__main__':

    # check and read command line args
    if len(sys.argv) < 7:
        print('args: [src dir] [dest dir] [metadir] [min fileID] [file type] [classification]')
        sys.exit(-1)

    srcdir, destdir, metadir, fid, ftype, classification = sys.argv[1:7]
    fid = int(fid)

    for f in os.listdir(srcdir):
        fpath = os.path.join(srcdir, f)

        # collect and store metadata
        metadata = {}
        metadata['file_id'] = fid
        metadata['file_type'] = ftype
        metadata['file_name'] = f
        metadata['classification'] = classification
        metadata_path = os.path.join(metadir, '{}.json'.format(fid))
        with codecs.open(metadata_path, 'w', encoding=config.ENCODING) as m:
            meta = json.dumps(metadata)
            m.write(meta)

        # collect and store metadata
        pcode_path = os.path.join(destdir, '{}.txt'.format(fid))
        xtract(fpath, pcode_path, fid)
        fid += 1