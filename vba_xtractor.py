"""
Runner for extracting VBA code from list of MS Office Word & Excel files

Input (src dir) is a directory containing MS Office Word & Excel files with macros
Output (dest dir) - extracted VBA code is stored in text files named [fid].txt

"""

import subprocess, sys, os, codecs
import config


# strings produced by olevba that mark beginning & end of VBA stream
STREAM_START = r'- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
STREAM_END   = r'-------------------------------------------------------------------------------'

# executes olvba command via shell subprocess
def xtract(fpath):
    p = subprocess.Popen("olevba -c \"{}\" > out.txt".format(fpath), stdout=subprocess.PIPE, shell=True)
    p.wait()

# returns list of all indices where string p starts in string s
def findall(p, s):
    i = s.find(p)
    ind = []
    while i != -1:
        ind.append(i)
        i = s.find(p, i+1)
    return ind


""" command line args (should be run in parallel with pcode_xtractor):
        src dir        - directory with MS Office Word and Excel Documents containing macros
        dest dir       - directory to store extracted code
        min fileID     - minimum starting file ID (ID increments after each file)
"""
if __name__ == '__main__':

    if len(sys.argv) < 3:
        print('args: [src dir] [dest dir] [min fileID]')
        sys.exit(-1)

    srcdir, destdir, fid = sys.argv[1:4]
    fid = int(fid)

    for f in os.listdir(srcdir):
        fpath = os.path.join(srcdir, f)

        xtract(fpath)
        with codecs.open("out.txt", 'r', encoding=config.ENCODING) as out_file:
            raw = out_file.read()
        module_start_ind = findall(STREAM_START, raw)
        module_end_ind = findall(STREAM_END, raw)
        module_end_ind.append(len(raw))
        if len(module_end_ind) > 0:
            module_end_ind = module_end_ind[1:]
        modules = [raw[st+len(STREAM_START):end] for (st, end) in zip(module_start_ind, module_end_ind)]

        vba_path = os.path.join(destdir, '{}.txt'.format(fid))
        with codecs.open(vba_path, 'w', encoding=config.ENCODING) as v:
            for m in modules:
                v.write(m)

        fid += 1
